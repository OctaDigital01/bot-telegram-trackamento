#!/usr/bin/env python3
"""
API Gateway - Servi√ßo para gerar PIX com a TriboPay e receber webhooks.
Vers√£o corrigida com base na documenta√ß√£o oficial da TriboPay.
"""

import os
import logging
import json
import requests
import random
import hashlib
from datetime import datetime
from flask import Flask, request, jsonify
from flask_cors import CORS
from dotenv import load_dotenv
from database import get_db

# Carrega vari√°veis de ambiente do arquivo .env
load_dotenv()

#======== CONFIGURA√á√ÉO DE LOGGING E VARI√ÅVEIS DE AMBIENTE =============
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configura√ß√µes
WEBHOOK_PORT = int(os.getenv('PORT', '8080'))
DATABASE_URL = os.getenv('DATABASE_URL')
TRIBOPAY_API_KEY = os.getenv('TRIBOPAY_API_KEY')
TRIBOPAY_API_URL = "https://api.tribopay.com.br/api/public/v1/transactions"
#================= FECHAMENTO ======================

#======== INICIALIZA√á√ÉO DO FLASK E BANCO DE DADOS =============
app = Flask(__name__)
CORS(app)

try:
    db = get_db()
    logger.info("‚úÖ Conex√£o com o PostgreSQL estabelecida com sucesso.")
except Exception as e:
    logger.error(f"‚ùå Falha cr√≠tica ao conectar com o PostgreSQL: {e}")
    db = None
#================= FECHAMENTO ======================

#======== MAPEAMENTO DE OFERTAS TRIBOPAY (CORRIGIDO CONFORME DOCUMENTA√á√ÉO) =============
def get_tribopay_offer_mapping():
    """Retorna um mapeamento limpo de plano_id para offer_hash com dados completos."""
    return {
        "plano_1mes": {
            "offer_hash": os.getenv('TRIBOPAY_OFFER_VIP_BASICO', 'deq4y2wybn'),
            "price": 2490,  # R$ 24,90
            "title": "Acesso VIP - Ana Cardoso (1 m√™s)"
        },
        "plano_3meses": {
            "offer_hash": os.getenv('TRIBOPAY_OFFER_VIP_PREMIUM', 'zawit'),
            "price": 4990,  # R$ 49,90
            "title": "Acesso VIP - Ana Cardoso (3 meses)"
        },
        "plano_1ano": {
            "offer_hash": os.getenv('TRIBOPAY_OFFER_VIP_COMPLETO', '8qbmp'),
            "price": 6700,  # R$ 67,00
            "title": "Acesso VIP - Ana Cardoso (1 ano)"
        },
        "default": {
            "offer_hash": os.getenv('TRIBOPAY_OFFER_DEFAULT', 'deq4y2wybn'),
            "price": 2490,  # R$ 24,90
            "title": "Acesso VIP - Ana Cardoso"
        }
    }

def get_offer_data_by_plano_id(plano_id):
    """Retorna dados completos da oferta baseado no plano_id. Usa 'default' se n√£o encontrar."""
    mapping = get_tribopay_offer_mapping()
    offer_data = mapping.get(plano_id, mapping["default"])
    logger.info(f"üì¶ Mapeamento de oferta: {plano_id} -> {offer_data['offer_hash']} (R$ {offer_data['price']/100:.2f})")
    return offer_data

# Fun√ß√£o para backward compatibility
def get_offer_hash_by_plano_id(plano_id):
    """DEPRECATED: Use get_offer_data_by_plano_id() instead."""
    return get_offer_data_by_plano_id(plano_id)["offer_hash"]
#================= FECHAMENTO ======================

#======== ENDPOINTS DE UTILIDADE (HEALTH CHECK, ETC) =============
@app.route('/health', methods=['GET'])
def health():
    """Endpoint de verifica√ß√£o de sa√∫de do servi√ßo."""
    db_status = 'conectado' if db else 'indispon√≠vel'
    return jsonify({
        'status': 'ok',
        'service': 'API Gateway',
        'database': f'PostgreSQL ({db_status})'
    })


@app.route('/', methods=['GET'])
def index():
    """Endpoint raiz com informa√ß√µes b√°sicas."""
    return jsonify({
        'service': 'API Gateway - Integra√ß√£o TriboPay',
        'version': '2.0-corrigida',
        'status': 'online'
    })
#================= FECHAMENTO ======================

#======== L√ìGICA PRINCIPAL: GERA√á√ÉO DE PIX (REFEITA) =============
@app.route('/api/pix/gerar', methods=['POST'])
def gerar_pix():
    """
    Gera uma transa√ß√£o PIX na TriboPay utilizando dados reais do cliente.
    Esta rota agora ESPERA receber os dados do cliente no corpo da requisi√ß√£o.
    """
    try:
        # 1. Valida√ß√£o da entrada de dados
        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'error': 'Corpo da requisi√ß√£o n√£o √© um JSON v√°lido'}), 400

        user_id = data.get('user_id')
        valor = data.get('valor')
        plano_id = data.get('plano_id', 'default')
        customer_data = data.get('customer')

        if not all([user_id, valor, plano_id]):
            return jsonify({'success': False, 'error': 'Campos obrigat√≥rios ausentes: user_id, valor, plano_id'}), 400

        # Se customer_data n√£o foi fornecido, gera dados √∫nicos realistas
        if not customer_data:
            customer_data = generate_unique_customer_data(user_id)
            logger.info(f"üé≤ Dados √∫nicos gerados para user_id {user_id}")
        else:
            # Valida campos obrigat√≥rios apenas se customer_data foi fornecido
            required_customer_fields = ['name', 'email', 'document', 'phone_number']
            if not all(k in customer_data for k in required_customer_fields):
                return jsonify({'success': False, 'error': f'Dados do cliente incompletos. Obrigat√≥rios: {required_customer_fields}'}), 400

        if not db:
            return jsonify({'success': False, 'error': 'Servi√ßo indispon√≠vel (sem conex√£o com o banco de dados)'}), 503

        # 2. Busca de dados de tracking com logs detalhados
        tracking_data = {}
        user_data = db.get_user(int(user_id))
        if user_data:
            tracking_data = user_data.get('tracking_data', {})
            logger.info(f"üéØ Tracking encontrado para usu√°rio {user_id}: {tracking_data}")
            
            # Log detalhado dos dados de tracking para debug PIX
            click_id = tracking_data.get('click_id')
            utm_source = tracking_data.get('utm_source')
            utm_medium = tracking_data.get('utm_medium')
            utm_campaign = tracking_data.get('utm_campaign')
            
            logger.info(f"üìä Dados tracking detalhados PIX:")
            logger.info(f"   - click_id: {click_id}")
            logger.info(f"   - utm_source: {utm_source}")
            logger.info(f"   - utm_medium: {utm_medium}")
            logger.info(f"   - utm_campaign: {utm_campaign}")
            logger.info(f"   - Total campos tracking: {len(tracking_data)}")
        else:
            logger.warning(f"‚ö†Ô∏è Usu√°rio {user_id} n√£o encontrado no banco. Tracking n√£o ser√° enviado.")
            logger.warning(f"üí° Dica: Usu√°rio pode n√£o ter passado pelo /start ou dados n√£o foram salvos corretamente")

        # 3. Prepara√ß√£o do Payload para a TriboPay, EXATAMENTE conforme a documenta√ß√£o oficial
        offer_data = get_offer_data_by_plano_id(plano_id)
        offer_hash = offer_data["offer_hash"]
        offer_price = offer_data["price"]
        offer_title = offer_data["title"]
        product_hash = "a8c1r56cgy"  # Product hash fixo do produto "Acesso VIP - Ana Cardoso"
        postback_url = "https://api-gateway-production-22bb.up.railway.app/webhook/tribopay"

        # Valida√ß√£o cr√≠tica: valor solicitado deve coincidir com o pre√ßo da oferta
        valor_centavos = int(float(valor) * 100)
        if valor_centavos != offer_price:
            logger.warning(f"‚ö†Ô∏è Valor solicitado ({valor_centavos}) diferente do pre√ßo da oferta ({offer_price}). Usando pre√ßo da oferta.")
            valor_centavos = offer_price

        tribopay_payload = {
            "amount": valor_centavos,
            "offer_hash": offer_hash,
            "payment_method": "pix",
            "installments": 1,  # CR√çTICO: Campo obrigat√≥rio conforme teste da API
            "postback_url": postback_url,
            "customer": customer_data,
            "cart": [{
                "product_hash": product_hash,  # CR√çTICO: Usar product_hash, n√£o offer_hash
                "title": offer_title,          # CR√çTICO: Campo obrigat√≥rio
                "price": valor_centavos,       # CR√çTICO: Campo obrigat√≥rio
                "quantity": 1,
                "operation_type": 1,           # CR√çTICO: Campo obrigat√≥rio (1 = sale)
                "tangible": False              # CR√çTICO: Campo obrigat√≥rio (produto digital)
            }],
            "tracking": {
                "src": tracking_data.get('click_id'),
                "utm_source": tracking_data.get('utm_source'),
                "utm_campaign": tracking_data.get('utm_campaign'),
                "utm_medium": tracking_data.get('utm_medium'),
                "utm_term": tracking_data.get('utm_term'),
                "utm_content": tracking_data.get('utm_content')
            }
        }

        logger.info(f"üöÄ Enviando payload para TriboPay para o cliente {customer_data['email']}.")
        logger.debug(f"Payload: {json.dumps(tribopay_payload, indent=2)}")

        # 4. Requisi√ß√£o √† API da TriboPay com tratamento de erro robusto
        response = requests.post(
            f"{TRIBOPAY_API_URL}?api_token={TRIBOPAY_API_KEY}",
            json=tribopay_payload,
            headers={"Content-Type": "application/json", "Accept": "application/json"},
            timeout=20
        )
        
        # Lan√ßa uma exce√ß√£o para erros HTTP (4xx ou 5xx), permitindo um catch mais limpo
        response.raise_for_status()

        # 5. Processamento da resposta de sucesso
        tribopay_data = response.json()
        transaction_id = tribopay_data.get('hash')
        pix_data = tribopay_data.get('pix', {})
        
        # CR√çTICO: A API TriboPay retorna pix_qr_code e pix_url, n√£o 'code' e 'url'
        pix_code = pix_data.get('pix_qr_code')  # C√≥digo PIX copia e cola
        qr_code = pix_data.get('pix_url')       # URL para pagamento

        if not all([transaction_id, pix_code, qr_code]):
            logger.error(f"‚ùå Resposta da TriboPay bem-sucedida, mas com dados PIX ausentes: {tribopay_data}")
            raise ValueError("Resposta da TriboPay incompleta")

        logger.info(f"‚úÖ PIX gerado com sucesso! Transaction ID: {transaction_id}")

        # 6. Salva a transa√ß√£o no banco de dados local
        db.invalidate_user_pix(int(user_id))
        db.save_pix_transaction(
            transaction_id=transaction_id, telegram_id=int(user_id), amount=float(valor),
            tracking_data=tracking_data, plano_id=plano_id
        )
        db.update_pix_transaction(
            transaction_id=transaction_id, status='waiting_payment', pix_code=pix_code, qr_code=qr_code
        )
        logger.info(f"üíæ Transa√ß√£o {transaction_id} salva no banco de dados.")

        return jsonify({
            'success': True,
            'transaction_id': transaction_id,
            'pix_copia_cola': pix_code,
            'qr_code': qr_code
        })

    except requests.exceptions.HTTPError as http_err:
        error_body = http_err.response.text
        logger.error(f"‚ùå ERRO HTTP da API TriboPay: {http_err.response.status_code} - {error_body}")
        return jsonify({
            'success': False, 'error': 'Erro de comunica√ß√£o com o gateway de pagamento.',
            'gateway_message': error_body
        }), http_err.response.status_code
    except Exception as e:
        logger.error(f"‚ùå Erro inesperado em /api/pix/gerar: {e}", exc_info=True)
        return jsonify({'success': False, 'error': 'Ocorreu um erro interno no servidor.'}), 500
#================= FECHAMENTO ======================

#======== ENDPOINTS AUSENTES - INVALIDAR PIX =============
@app.route('/api/pix/invalidar/<int:user_id>', methods=['POST'])
def invalidar_pix_usuario(user_id):
    """Invalida todos os PIX pendentes do usu√°rio."""
    try:
        if not db:
            return jsonify({'success': False, 'error': 'Servi√ßo indispon√≠vel (sem conex√£o com o banco de dados)'}), 503
        
        # Chama a fun√ß√£o do banco para invalidar
        result = db.invalidate_user_pix(user_id)
        
        if result:
            logger.info(f"üóëÔ∏è PIX do usu√°rio {user_id} invalidados com sucesso")
            return jsonify({'success': True, 'message': f'PIX do usu√°rio {user_id} invalidados'})
        else:
            logger.warning(f"‚ö†Ô∏è Nenhum PIX encontrado para invalidar do usu√°rio {user_id}")
            return jsonify({'success': True, 'message': f'Nenhum PIX encontrado para o usu√°rio {user_id}'})
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao invalidar PIX do usu√°rio {user_id}: {e}")
        return jsonify({'success': False, 'error': 'Erro interno do servidor'}), 500

@app.route('/api/tracking/latest', methods=['GET'])
def get_latest_tracking():
    """Retorna o √∫ltimo tracking dispon√≠vel."""
    try:
        if not db:
            return jsonify({'success': False, 'error': 'Servi√ßo indispon√≠vel (sem conex√£o com o banco de dados)'}), 503
        
        # Busca √∫ltimo tracking salvo
        latest = db.get_latest_tracking()
        
        if latest:
            logger.info(f"‚úÖ √öltimo tracking encontrado: {latest.get('id')}")
            return jsonify({
                'success': True, 
                'original': latest.get('original_data', '{}'),
                'created_at': latest.get('created_at')
            })
        else:
            logger.warning("‚ö†Ô∏è Nenhum tracking encontrado")
            return jsonify({'success': False, 'error': 'Nenhum tracking encontrado'}), 404
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao buscar √∫ltimo tracking: {e}")
        return jsonify({'success': False, 'error': 'Erro interno do servidor'}), 500

@app.route('/api/users', methods=['POST'])
def save_user():
    """Salva dados do usu√°rio no banco de dados."""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'error': 'Corpo da requisi√ß√£o n√£o √© um JSON v√°lido'}), 400
        
        required_fields = ['telegram_id', 'username', 'first_name', 'tracking_data']
        if not all(field in data for field in required_fields):
            return jsonify({'success': False, 'error': f'Campos obrigat√≥rios ausentes: {required_fields}'}), 400
        
        if not db:
            return jsonify({'success': False, 'error': 'Servi√ßo indispon√≠vel (sem conex√£o com o banco de dados)'}), 503
        
        # Salva usu√°rio no banco
        result = db.save_user(
            telegram_id=data['telegram_id'],
            username=data['username'], 
            first_name=data['first_name'],
            last_name=data.get('last_name', ''),
            tracking_data=data['tracking_data']
        )
        
        if result:
            logger.info(f"‚úÖ Usu√°rio {data['telegram_id']} salvo com sucesso")
            return jsonify({'success': True, 'message': 'Usu√°rio salvo com sucesso'})
        else:
            logger.error(f"‚ùå Falha ao salvar usu√°rio {data['telegram_id']}")
            return jsonify({'success': False, 'error': 'Falha ao salvar usu√°rio'}), 500
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao salvar usu√°rio: {e}")
        return jsonify({'success': False, 'error': 'Erro interno do servidor'}), 500

@app.route('/api/tracking/save', methods=['POST', 'OPTIONS'])
def save_tracking():
    """Salva dados de tracking (mapeamento de ID)."""
    # Handle preflight OPTIONS request
    if request.method == 'OPTIONS':
        response = jsonify({'status': 'ok'})
        response.headers['Access-Control-Allow-Origin'] = '*'
        response.headers['Access-Control-Allow-Methods'] = 'POST, OPTIONS'
        response.headers['Access-Control-Allow-Headers'] = 'Content-Type'
        return response
        
    try:
        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'error': 'Corpo da requisi√ß√£o n√£o √© um JSON v√°lido'}), 400
        
        safe_id = data.get('safe_id')
        original_data = data.get('original') or data.get('original_data')  # Aceita ambos os formatos
        
        if not all([safe_id, original_data]):
            return jsonify({'success': False, 'error': 'Campos obrigat√≥rios ausentes: safe_id, original|original_data'}), 400
        
        if not db:
            return jsonify({'success': False, 'error': 'Servi√ßo indispon√≠vel (sem conex√£o com o banco de dados)'}), 503
        
        # Salva tracking mapping
        db.save_tracking_mapping(safe_id, original_data)
        logger.info(f"‚úÖ Tracking mapping {safe_id} salvo com sucesso")
        
        return jsonify({
            'success': True, 
            'message': 'Tracking salvo com sucesso',
            'safe_id': safe_id
        })
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao salvar tracking: {e}")
        return jsonify({'success': False, 'error': 'Erro interno do servidor'}), 500

@app.route('/api/tracking/get/<safe_id>', methods=['GET'])
def get_tracking(safe_id):
    """Busca dados de tracking por safe_id."""
    try:
        if not db:
            return jsonify({'success': False, 'error': 'Servi√ßo indispon√≠vel (sem conex√£o com o banco de dados)'}), 503
        
        # Busca tracking mapping
        tracking = db.get_tracking_mapping(safe_id)
        
        if tracking:
            logger.info(f"‚úÖ Tracking {safe_id} encontrado")
            return jsonify({
                'success': True,
                'original': tracking.get('original_data'),
                'created_at': tracking.get('created_at'),
                'accessed_at': tracking.get('accessed_at')
            })
        else:
            logger.warning(f"‚ö†Ô∏è Tracking {safe_id} n√£o encontrado")
            return jsonify({'success': False, 'error': 'Tracking n√£o encontrado'}), 404
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao buscar tracking {safe_id}: {e}")
        return jsonify({'success': False, 'error': 'Erro interno do servidor'}), 500

@app.route('/api/pix/verificar/<int:user_id>/<plano_id>', methods=['GET'])
def verificar_pix_existente(user_id, plano_id):
    """Verifica se existe PIX v√°lido para o usu√°rio e plano."""
    try:
        logger.info(f"üîç ENDPOINT VERIFICAR PIX: user_id={user_id}, plano_id={plano_id}")
        
        if not db:
            logger.error("‚ùå Database n√£o dispon√≠vel")
            return jsonify({'success': False, 'error': 'Servi√ßo indispon√≠vel (sem conex√£o com o banco de dados)'}), 503
        
        # Busca PIX v√°lido para o usu√°rio e plano
        logger.info(f"üì° Chamando db.get_valid_pix({user_id}, {plano_id})")
        pix_data = db.get_valid_pix(user_id, plano_id)
        logger.info(f"üì¶ Resultado db.get_valid_pix: {pix_data}")
        
        if pix_data:
            # Calcula tempo restante
            from datetime import datetime, timedelta
            created_at = pix_data.get('created_at')
            logger.info(f"‚è∞ PIX created_at: {created_at} (tipo: {type(created_at)})")
            
            if isinstance(created_at, str):
                created_at = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
            
            if created_at:
                expire_time = created_at + timedelta(minutes=15)
                now = datetime.now(created_at.tzinfo) if created_at.tzinfo else datetime.now()
                tempo_restante = expire_time - now
                logger.info(f"‚è∞ Tempo restante calculado: {tempo_restante.total_seconds()} segundos")
                
                if tempo_restante.total_seconds() > 0:
                    tempo_min = int(tempo_restante.total_seconds() / 60)
                    pix_data['tempo_restante'] = f"{tempo_min} minutos"
                    
                    logger.info(f"‚úÖ PIX V√ÅLIDO encontrado para usu√°rio {user_id}, plano {plano_id} - {tempo_min} min restantes")
                    return jsonify({
                        'success': True,
                        'pix_valido': True,
                        'pix_data': pix_data
                    })
                else:
                    logger.info(f"‚è∞ PIX EXPIRADO para usu√°rio {user_id}, plano {plano_id}")
            else:
                logger.warning(f"‚ö†Ô∏è PIX sem created_at v√°lido para usu√°rio {user_id}")
        
        logger.info(f"‚ùå Nenhum PIX v√°lido encontrado para usu√°rio {user_id}, plano {plano_id}")
        return jsonify({
            'success': True,
            'pix_valido': False,
            'pix_data': None
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar PIX do usu√°rio {user_id}: {e}", exc_info=True)
        return jsonify({'success': False, 'error': 'Erro interno do servidor'}), 500
#================= FECHAMENTO ======================

#======== SISTEMA DE GERA√á√ÉO DE DADOS √öNICOS =============
def generate_unique_customer_data(user_id):
    """Gera dados √∫nicos de cliente para PIX - nunca repete"""
    
    # Listas de nomes brasileiros comuns
    primeiros_nomes = [
        "Ana", "Maria", "Jo√£o", "Pedro", "Lucas", "Gabriel", "Rafael", "Daniel", "Bruno", "Felipe",
        "Fernanda", "Juliana", "Camila", "Amanda", "Beatriz", "Carolina", "Larissa", "Mariana",
        "Andr√©", "Diego", "Marcos", "Thiago", "Rodrigo", "Mateus", "Gustavo", "Ricardo",
        "Patr√≠cia", "Renata", "Sandra", "Vanessa", "Claudia", "M√¥nica", "Silvia", "Adriana",
        "Carlos", "Fernando", "Eduardo", "Marcelo", "Paulo", "Roberto", "Leonardo", "Vinicius"
    ]
    
    sobrenomes = [
        "Silva", "Santos", "Oliveira", "Souza", "Lima", "Ferreira", "Costa", "Pereira", "Almeida",
        "Martins", "Ara√∫jo", "Melo", "Barbosa", "Ribeiro", "Monteiro", "Cardoso", "Carvalho",
        "Gomes", "Nascimento", "Moreira", "Reis", "Freitas", "Campos", "Cunha", "Pinto", "Farias",
        "Batista", "Vieira", "Mendes", "Castro", "Rocha", "Dias", "Moura", "Correia", "Teixeira"
    ]
    
    # Usa user_id + timestamp para garantir unicidade
    import time
    seed = int(str(user_id) + str(int(time.time() * 1000))[-6:])
    random.seed(seed)
    
    # Gera nome √∫nico
    primeiro = random.choice(primeiros_nomes)
    sobrenome = random.choice(sobrenomes)
    nome_completo = f"{primeiro} {sobrenome}"
    
    # Gera CPF v√°lido √∫nico
    def gerar_cpf():
        # Gera 9 primeiros d√≠gitos
        cpf = [random.randint(0, 9) for _ in range(9)]
        
        # Calcula primeiro d√≠gito verificador
        soma = sum(cpf[i] * (10 - i) for i in range(9))
        digito1 = (soma * 10 % 11) % 10
        cpf.append(digito1)
        
        # Calcula segundo d√≠gito verificador
        soma = sum(cpf[i] * (11 - i) for i in range(10))
        digito2 = (soma * 10 % 11) % 10
        cpf.append(digito2)
        
        return ''.join(map(str, cpf))
    
    # Gera telefone celular v√°lido
    def gerar_telefone():
        # DDD v√°lidos brasileiros
        ddds = ['11', '12', '13', '14', '15', '16', '17', '18', '19', '21', '22', '24', '27', '28',
                '31', '32', '33', '34', '35', '37', '38', '41', '42', '43', '44', '45', '46', '47',
                '48', '49', '51', '53', '54', '55', '61', '62', '63', '64', '65', '66', '67', '68',
                '69', '71', '73', '74', '75', '77', '79', '81', '82', '83', '84', '85', '86', '87',
                '88', '89', '91', '92', '93', '94', '95', '96', '97', '98', '99']
        
        ddd = random.choice(ddds)
        # Celular sempre come√ßa com 9
        numero = '9' + ''.join([str(random.randint(0, 9)) for _ in range(8)])
        return f"{ddd}{numero}"
    
    cpf = gerar_cpf()
    telefone = gerar_telefone()
    
    # Gera email seguro removendo acentos e caracteres especiais
    import re
    email_base = re.sub(r'[^a-z]', '', primeiro.lower() + sobrenome.lower())
    if len(email_base) < 3:  # Fallback se nome muito curto
        email_base = f"user{user_id}"
    email = f"{email_base}{random.randint(100, 999)}@gmail.com"
    
    logger.info(f"üé≤ Dados √∫nicos gerados para user {user_id}: {nome_completo}, CPF: {cpf[:3]}***")
    
    return {
        'name': nome_completo,
        'email': email,
        'document': cpf,
        'phone_number': telefone
    }
#================= FECHAMENTO ======================

#======== FUN√á√ÉO DE CONVERS√ÉO XTRACKY =============
def send_conversion_to_xtracky(transaction_id):
    """Envia convers√£o para Xtracky quando pagamento √© aprovado"""
    try:
        if not db:
            logger.error("‚ùå Banco indispon√≠vel - convers√£o n√£o enviada")
            return False
            
        # Busca dados da transa√ß√£o
        transaction = db.get_pix_transaction(transaction_id)
        if not transaction:
            logger.error(f"‚ùå Transa√ß√£o {transaction_id} n√£o encontrada")
            return False
            
        # Busca click_id diretamente da transa√ß√£o (est√° armazenado como campo separado)
        click_id = transaction.get('click_id')
        tracking_data = transaction.get('tracking_data', {})
        
        # Debug: Log detalhado dos dados de tracking da transa√ß√£o
        logger.info(f"üîç Dados transa√ß√£o {transaction_id}:")
        logger.info(f"   - click_id direto: {click_id}")
        logger.info(f"   - tracking_data: {tracking_data}")
        logger.info(f"   - tracking_data.click_id: {tracking_data.get('click_id') if isinstance(tracking_data, dict) else 'N/A'}")
        
        # Fallback: se click_id n√£o est√° direto, tenta extrair do tracking_data
        if not click_id and isinstance(tracking_data, dict):
            click_id = tracking_data.get('click_id')
            logger.info(f"üîÑ Usando click_id do tracking_data: {click_id}")
        
        if not click_id:
            logger.warning(f"‚ö†Ô∏è Transa√ß√£o {transaction_id} sem click_id - convers√£o n√£o enviada")
            logger.warning(f"   Dados dispon√≠veis: {list(transaction.keys())}")
            return False
            
        # Dados da convers√£o para Xtracky
        conversion_data = {
            'token': '72701474-7e6c-4c87-b84f-836d4547a4bd',
            'click_id': click_id,
            'value': float(transaction.get('amount', 0)),
            'currency': 'BRL',
            'status': 'paid'
        }
        
        # Envia para Xtracky
        response = requests.post(
            'https://api.xtracky.com/api/integrations/tribopay',
            json=conversion_data,
            timeout=10
        )
        
        if response.status_code == 200:
            logger.info(f"‚úÖ Convers√£o enviada para Xtracky: {click_id} - R$ {transaction.get('amount', 0)}")
            return True
        else:
            logger.error(f"‚ùå Erro ao enviar convers√£o para Xtracky: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico ao enviar convers√£o para Xtracky: {e}")
        return False
#================= FECHAMENTO ======================

#======== L√ìGICA DO WEBHOOK (CORRIGIDA) =============
@app.route('/webhook/tribopay', methods=['POST'])
def tribopay_webhook():
    """Webhook para receber e processar notifica√ß√µes da TriboPay."""
    try:
        webhook_data = request.get_json()
        if not webhook_data:
            return jsonify({'status': 'ignorado', 'reason': 'payload vazio'}), 400

        logger.info(f"üì• Webhook da TriboPay recebido.")
        logger.debug(f"Webhook Payload: {json.dumps(webhook_data)}")

        # CORRE√á√ÉO CR√çTICA: M√∫ltiplos formatos de webhook da TriboPay
        transaction_data = webhook_data.get('transaction')
        transaction_id = None
        
        # Formato 1: transaction √© objeto com id/hash
        if isinstance(transaction_data, dict):
            transaction_id = transaction_data.get('id') or transaction_data.get('hash')
        # Formato 2: transaction √© string JSON
        elif isinstance(transaction_data, str):
            try:
                transaction_data = json.loads(transaction_data)
                transaction_id = transaction_data.get('id') or transaction_data.get('hash')
            except json.JSONDecodeError:
                # Formato 3: transaction √© diretamente o hash ID
                if len(transaction_data) > 5:  # Assumindo que hash tem pelo menos 6 caracteres
                    transaction_id = transaction_data
                    logger.info(f"üîç Transaction data √© hash direto: {transaction_data}")
                else:
                    logger.error(f"‚ùå transaction_data √© string mas n√£o √© JSON v√°lido nem hash: {transaction_data}")
                    return jsonify({'status': 'erro', 'reason': 'transaction data inv√°lido'}), 400
        # Formato 4: ID direto no root do webhook
        elif not transaction_data:
            transaction_id = webhook_data.get('id') or webhook_data.get('hash')
            
        # Formato 5: Fallback - tenta outros campos comuns da TriboPay
        if not transaction_id:
            transaction_id = webhook_data.get('transaction_id') or webhook_data.get('txn_id')
        
        if not transaction_id:
            logger.warning("‚ö†Ô∏è Webhook recebido sem 'transaction.id' ou 'transaction.hash'. Ignorando.")
            return jsonify({'status': 'ignorado', 'reason': 'missing transaction.id'}), 200

        status = webhook_data.get('status')
        logger.info(f"üîç Processando webhook para transa√ß√£o {transaction_id} com status '{status}'.")

        if db:
            db.update_pix_transaction(transaction_id, status=status)
            logger.info(f"üíæ Status da transa√ß√£o {transaction_id} atualizado para '{status}' no banco de dados.")
            
            # Envia convers√£o para Xtracky se pagamento foi aprovado
            if status == 'paid' or status == 'approved':
                send_conversion_to_xtracky(transaction_id)
        else:
            logger.error("‚ùå Banco de dados indispon√≠vel. N√£o foi poss√≠vel processar o webhook.")

        return jsonify({'status': 'recebido'})

    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico no processamento do webhook: {e}", exc_info=True)
        return jsonify({'error': 'Internal server error'}), 500
#================= FECHAMENTO ======================

#======== EXECU√á√ÉO PRINCIPAL =============
if __name__ == '__main__':
    if not TRIBOPAY_API_KEY:
        logger.critical("‚ùå A vari√°vel de ambiente TRIBOPAY_API_KEY n√£o est√° definida. O servi√ßo n√£o pode iniciar.")
    else:
        logger.info("üöÄ === API GATEWAY TRIBOPAY INICIANDO ===")
        logger.info(f"üåê Escutando em http://0.0.0.0:{WEBHOOK_PORT}")
        # Em um ambiente de produ√ß√£o real, use um servidor WSGI como Gunicorn ou uWSGI
        app.run(host='0.0.0.0', port=WEBHOOK_PORT, debug=False)
#================= FECHAMENTO ======================