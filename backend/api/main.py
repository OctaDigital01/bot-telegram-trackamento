#!/usr/bin/env python3
"""
API Gateway - Servi√ßo para gerar PIX com a TriboPay e receber webhooks.
Vers√£o corrigida com base na documenta√ß√£o oficial da TriboPay.
"""

import os
import logging
import json
import requests
from datetime import datetime
from flask import Flask, request, jsonify
from flask_cors import CORS
from database import get_db

#======== CONFIGURA√á√ÉO DE LOGGING E VARI√ÅVEIS DE AMBIENTE =============
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configura√ß√µes
WEBHOOK_PORT = int(os.getenv('PORT', '8080'))
DATABASE_URL = os.getenv('DATABASE_URL')
TRIBOPAY_API_KEY = os.getenv('TRIBOPAY_API_KEY')
TRIBOPAY_API_URL = "https://api.tribopay.com.br/api/public/v1/transactions"
#================= FECHAMENTO ======================

#======== INICIALIZA√á√ÉO DO FLASK E BANCO DE DADOS =============
app = Flask(__name__)
CORS(app)

try:
    db = get_db()
    logger.info("‚úÖ Conex√£o com o PostgreSQL estabelecida com sucesso.")
except Exception as e:
    logger.error(f"‚ùå Falha cr√≠tica ao conectar com o PostgreSQL: {e}")
    db = None
#================= FECHAMENTO ======================

#======== MAPEAMENTO DE OFERTAS TRIBOPAY (LIMPO E OTIMIZADO) =============
def get_tribopay_offer_mapping():
    """Retorna um mapeamento limpo de plano_id para offer_hash."""
    return {
        "plano_1mes": os.getenv('TRIBOPAY_OFFER_VIP_BASICO', 'deq4y2wybn'),   # R$ 24,90
        "plano_3meses": os.getenv('TRIBOPAY_OFFER_VIP_PREMIUM', 'zawit'),     # R$ 49,90
        "plano_1ano": os.getenv('TRIBOPAY_OFFER_VIP_COMPLETO', '8qbmp'),      # R$ 67,00
        "default": os.getenv('TRIBOPAY_OFFER_DEFAULT', 'deq4y2wybn')
    }

def get_offer_hash_by_plano_id(plano_id):
    """Retorna offer_hash baseado no plano_id. Usa 'default' se n√£o encontrar."""
    mapping = get_tribopay_offer_mapping()
    offer_hash = mapping.get(plano_id, mapping["default"])
    logger.info(f"üì¶ Mapeamento de oferta: {plano_id} -> {offer_hash}")
    return offer_hash
#================= FECHAMENTO ======================

#======== ENDPOINTS DE UTILIDADE (HEALTH CHECK, ETC) =============
@app.route('/health', methods=['GET'])
def health():
    """Endpoint de verifica√ß√£o de sa√∫de do servi√ßo."""
    db_status = 'conectado' if db else 'indispon√≠vel'
    return jsonify({
        'status': 'ok',
        'service': 'API Gateway',
        'database': f'PostgreSQL ({db_status})'
    })

@app.route('/', methods=['GET'])
def index():
    """Endpoint raiz com informa√ß√µes b√°sicas."""
    return jsonify({
        'service': 'API Gateway - Integra√ß√£o TriboPay',
        'version': '2.0-corrigida',
        'status': 'online'
    })
#================= FECHAMENTO ======================

#======== L√ìGICA PRINCIPAL: GERA√á√ÉO DE PIX (REFEITA) =============
@app.route('/api/pix/gerar', methods=['POST'])
def gerar_pix():
    """
    Gera uma transa√ß√£o PIX na TriboPay utilizando dados reais do cliente.
    Esta rota agora ESPERA receber os dados do cliente no corpo da requisi√ß√£o.
    """
    try:
        # 1. Valida√ß√£o da entrada de dados
        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'error': 'Corpo da requisi√ß√£o n√£o √© um JSON v√°lido'}), 400

        user_id = data.get('user_id')
        valor = data.get('valor')
        plano_id = data.get('plano_id', 'default')
        customer_data = data.get('customer')

        if not all([user_id, valor, plano_id, customer_data]):
            return jsonify({'success': False, 'error': 'Campos obrigat√≥rios ausentes: user_id, valor, plano_id, customer'}), 400

        required_customer_fields = ['name', 'email', 'document', 'phone_number']
        if not all(k in customer_data for k in required_customer_fields):
            return jsonify({'success': False, 'error': f'Dados do cliente incompletos. Obrigat√≥rios: {required_customer_fields}'}), 400

        if not db:
            return jsonify({'success': False, 'error': 'Servi√ßo indispon√≠vel (sem conex√£o com o banco de dados)'}), 503

        # 2. Busca de dados de tracking
        tracking_data = {}
        user_data = db.get_user(int(user_id))
        if user_data:
            tracking_data = user_data.get('tracking_data', {})
            logger.info(f"üéØ Tracking encontrado para usu√°rio {user_id}.")
        else:
            logger.warning(f"‚ö†Ô∏è Usu√°rio {user_id} n√£o encontrado no banco. Tracking n√£o ser√° enviado.")

        # 3. Prepara√ß√£o do Payload para a TriboPay, conforme a documenta√ß√£o
        offer_hash = get_offer_hash_by_plano_id(plano_id)
        postback_url = "https://api-gateway-production-22bb.up.railway.app/webhook/tribopay" # Mova para env var se preferir

        tribopay_payload = {
            "amount": int(float(valor) * 100),
            "offer_hash": offer_hash,
            "payment_method": "pix",
            "postback_url": postback_url,
            "customer": customer_data,
            "cart": [{
                "offer_hash": offer_hash,
                "quantity": 1
            }],
            "tracking": {
                "src": tracking_data.get('click_id'),
                "utm_source": tracking_data.get('utm_source'),
                "utm_campaign": tracking_data.get('utm_campaign'),
                "utm_medium": tracking_data.get('utm_medium'),
                "utm_term": tracking_data.get('utm_term'),
                "utm_content": tracking_data.get('utm_content')
            }
        }

        logger.info(f"üöÄ Enviando payload para TriboPay para o cliente {customer_data['email']}.")
        logger.debug(f"Payload: {json.dumps(tribopay_payload, indent=2)}")

        # 4. Requisi√ß√£o √† API da TriboPay com tratamento de erro robusto
        response = requests.post(
            f"{TRIBOPAY_API_URL}?api_token={TRIBOPAY_API_KEY}",
            json=tribopay_payload,
            headers={"Content-Type": "application/json", "Accept": "application/json"},
            timeout=20
        )
        
        # Lan√ßa uma exce√ß√£o para erros HTTP (4xx ou 5xx), permitindo um catch mais limpo
        response.raise_for_status()

        # 5. Processamento da resposta de sucesso
        tribopay_data = response.json()
        transaction_id = tribopay_data.get('hash')
        pix_data = tribopay_data.get('pix', {})
        pix_code = pix_data.get('code')
        qr_code = pix_data.get('url')

        if not all([transaction_id, pix_code, qr_code]):
            logger.error(f"‚ùå Resposta da TriboPay bem-sucedida, mas com dados PIX ausentes: {tribopay_data}")
            raise ValueError("Resposta da TriboPay incompleta")

        logger.info(f"‚úÖ PIX gerado com sucesso! Transaction ID: {transaction_id}")

        # 6. Salva a transa√ß√£o no banco de dados local
        db.invalidate_user_pix(int(user_id))
        db.save_pix_transaction(
            transaction_id=transaction_id, telegram_id=int(user_id), amount=float(valor),
            tracking_data=tracking_data, plano_id=plano_id
        )
        db.update_pix_transaction(
            transaction_id=transaction_id, status='waiting_payment', pix_code=pix_code, qr_code=qr_code
        )
        logger.info(f"üíæ Transa√ß√£o {transaction_id} salva no banco de dados.")

        return jsonify({
            'success': True,
            'transaction_id': transaction_id,
            'pix_copia_cola': pix_code,
            'qr_code': qr_code
        })

    except requests.exceptions.HTTPError as http_err:
        error_body = http_err.response.text
        logger.error(f"‚ùå ERRO HTTP da API TriboPay: {http_err.response.status_code} - {error_body}")
        return jsonify({
            'success': False, 'error': 'Erro de comunica√ß√£o com o gateway de pagamento.',
            'gateway_message': error_body
        }), http_err.response.status_code
    except Exception as e:
        logger.error(f"‚ùå Erro inesperado em /api/pix/gerar: {e}", exc_info=True)
        return jsonify({'success': False, 'error': 'Ocorreu um erro interno no servidor.'}), 500
#================= FECHAMENTO ======================

#======== L√ìGICA DO WEBHOOK (REFINADA) =============
@app.route('/webhook/tribopay', methods=['POST'])
def tribopay_webhook():
    """Webhook para receber e processar notifica√ß√µes da TriboPay."""
    try:
        webhook_data = request.get_json()
        if not webhook_data:
            return jsonify({'status': 'ignorado', 'reason': 'payload vazio'}), 400

        logger.info(f"üì• Webhook da TriboPay recebido.")
        logger.debug(f"Webhook Payload: {json.dumps(webhook_data)}")

        transaction_data = webhook_data.get('transaction', {})
        transaction_id = transaction_data.get('id')
        
        if not transaction_id:
            logger.warning("‚ö†Ô∏è Webhook recebido sem 'transaction.id'. Ignorando.")
            return jsonify({'status': 'ignorado', 'reason': 'missing transaction.id'}), 200

        status = webhook_data.get('status')
        logger.info(f"üîç Processando webhook para transa√ß√£o {transaction_id} com status '{status}'.")

        if db:
            db.update_pix_transaction(transaction_id, status=status)
            logger.info(f"üíæ Status da transa√ß√£o {transaction_id} atualizado para '{status}' no banco de dados.")
            # Aqui voc√™ pode adicionar a l√≥gica de postback para o Xtracky, se o status for 'paid'
        else:
            logger.error("‚ùå Banco de dados indispon√≠vel. N√£o foi poss√≠vel processar o webhook.")

        return jsonify({'status': 'recebido'})

    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico no processamento do webhook: {e}", exc_info=True)
        return jsonify({'error': 'Internal server error'}), 500
#================= FECHAMENTO ======================

#======== EXECU√á√ÉO PRINCIPAL =============
if __name__ == '__main__':
    if not TRIBOPAY_API_KEY:
        logger.critical("‚ùå A vari√°vel de ambiente TRIBOPAY_API_KEY n√£o est√° definida. O servi√ßo n√£o pode iniciar.")
    else:
        logger.info("üöÄ === API GATEWAY TRIBOPAY INICIANDO ===")
        logger.info(f"üåê Escutando em http://0.0.0.0:{WEBHOOK_PORT}")
        # Em um ambiente de produ√ß√£o real, use um servidor WSGI como Gunicorn ou uWSGI
        app.run(host='0.0.0.0', port=WEBHOOK_PORT, debug=False)
#================= FECHAMENTO ======================