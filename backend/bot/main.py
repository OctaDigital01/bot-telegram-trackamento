#!/usr/bin/env python3
"""
Bot Telegram - Funil de Vendas com Tracking Completo
Conecta com API Gateway e PostgreSQL
Sistema h√≠brido: funciona com e sem grupo
"""

import os
import logging
import asyncio
import json
import base64
import requests
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputMediaVideo
from telegram.ext import (
    Application, CommandHandler, ContextTypes, 
    ChatJoinRequestHandler, CallbackQueryHandler
)
from database import get_db

# Configura√ß√£o de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ================================
# CONFIGURA√á√ïES E CONSTANTES
# ================================

# Configura√ß√µes do bot
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8422752874:AAFHBrpN2fXOPvQf0-k_786AooAQevUh4kY')
API_GATEWAY_URL = os.getenv('API_GATEWAY_URL', 'https://api-gateway.railway.app')
DATABASE_URL = os.getenv('DATABASE_URL')

# Configura√ß√µes do grupo (vari√°veis de ambiente Railway)
GROUP_ID = os.getenv('GROUP_ID', '-1002342384678')  # Placeholder - configurar no Railway
GROUP_INVITE_LINK = os.getenv('GROUP_INVITE_LINK', 'https://t.me/+exemplo')  # Placeholder
GROUP_NAME = os.getenv('GROUP_NAME', 'Grupo VIP')  # Nome do grupo

# Delays estrat√©gicos (em segundos) - facilmente edit√°veis
DELAY_BEFORE_APPROVAL = int(os.getenv('DELAY_BEFORE_APPROVAL', '30'))  # Delay antes de aprovar entrada
DELAY_BETWEEN_PREVIEWS = int(os.getenv('DELAY_BETWEEN_PREVIEWS', '7'))  # Delay entre envio de pr√©vias

# File IDs das m√≠dias (placeholders - ser√£o configurados depois)
PREVIEW_MEDIA = {
    'video1': os.getenv('PREVIEW_VIDEO1_ID', 'BAACAgIAAxkBAAIBYGZ1234567890abcdef'),  # Placeholder
    'photo1': os.getenv('PREVIEW_PHOTO1_ID', 'AgACAgIAAxkBAAIBYGZ1234567890abcdef'),  # Placeholder
    'photo2': os.getenv('PREVIEW_PHOTO2_ID', 'AgACAgIAAxkBAAIBYGZ1234567890abcdef'),  # Placeholder
    'video2': os.getenv('PREVIEW_VIDEO2_ID', 'BAACAgIAAxkBAAIBYGZ1234567890abcdef'),  # Placeholder
}

# Textos do funil
WELCOME_GROUP_MESSAGE = """üéâ SEJA BEM-VINDA AO NOSSO GRUPO VIP!

Voc√™ acabou de entrar em um lugar especial...

Aqui voc√™ vai encontrar conte√∫dos EXCLUSIVOS que v√£o te ajudar a transformar sua vida! ‚ú®

üì∏ Vou te mostrar algumas pr√©vias do que te aguarda...

Prepare-se para descobrir todos os segredos! üî•"""

VIP_INVITATION_MESSAGE = """üî• GOSTOU DAS PR√âVIAS?

Isso √© apenas o come√ßo! No nosso VIP voc√™ vai ter acesso a:

üéØ Conte√∫dos completos e exclusivos
üíé Material que n√£o existe em lugar nenhum
üöÄ Acesso imediato a tudo
‚ú® Suporte direto comigo

üí∞ Por apenas R$ 10,00 voc√™ garante acesso TOTAL!

üëá CLIQUE AQUI PARA GARANTIR SEU VIP:"""

# Database PostgreSQL
try:
    db = get_db()
    logger.info("‚úÖ Bot conectado ao PostgreSQL")
except Exception as e:
    logger.error(f"‚ùå Erro ao conectar PostgreSQL: {e}")
    db = None

def decode_tracking_data(encoded_param):
    """Decodifica dados de tracking do Xtracky"""
    try:
        # Verifica se √© um ID mapeado (come√ßa com 'M')
        if encoded_param.startswith('M') and len(encoded_param) <= 12:
            logger.info(f"üîç ID mapeado detectado: {encoded_param}")
            
            # Tenta recuperar dados do API Gateway
            try:
                response = requests.get(f"{API_GATEWAY_URL}/api/tracking/get/{encoded_param}", timeout=5)
                if response.status_code == 200:
                    api_data = response.json()
                    if api_data.get('success') and api_data.get('original'):
                        original_data = json.loads(api_data['original'])
                        logger.info(f"‚úÖ Dados recuperados do servidor: {original_data}")
                        return original_data
                    else:
                        logger.warning(f"‚ö†Ô∏è Dados n√£o encontrados no servidor para ID: {encoded_param}")
                else:
                    logger.warning(f"‚ö†Ô∏è API retornou status {response.status_code}")
            except Exception as e:
                logger.error(f"‚ùå Erro ao consultar API: {e}")
            
            # Fallback: usar ID como click_id
            return {'click_id': encoded_param}
        
        # Tenta decodificar Base64
        try:
            decoded_bytes = base64.b64decode(encoded_param.encode('utf-8'))
            decoded_str = decoded_bytes.decode('utf-8')
            tracking_data = json.loads(decoded_str)
            logger.info(f"‚úÖ Base64 decodificado: {tracking_data}")
            return tracking_data
        except:
            logger.info(f"‚ÑπÔ∏è N√£o √© Base64 v√°lido: {encoded_param}")
        
        # Processa formato Xtracky concatenado
        return process_xtracky_data(encoded_param)
        
    except Exception as e:
        logger.error(f"‚ùå Erro na decodifica√ß√£o: {e}")
        return {'click_id': encoded_param}

def process_xtracky_data(data_string):
    """Processa dados do Xtracky no formato concatenado"""
    try:
        # Formato esperado: "token::click_id::medium::campaign::term::content"
        if '::' in data_string:
            parts = data_string.split('::')
            
            tracking_data = {}
            
            # Mapeia as partes para os campos corretos
            if len(parts) >= 1 and parts[0]:
                tracking_data['utm_source'] = parts[0]  # Token Xtracky
            if len(parts) >= 2 and parts[1]:
                tracking_data['click_id'] = parts[1]
            if len(parts) >= 3 and parts[2]:
                tracking_data['utm_medium'] = parts[2]
            if len(parts) >= 4 and parts[3]:
                tracking_data['utm_campaign'] = parts[3]
            if len(parts) >= 5 and parts[4]:
                tracking_data['utm_term'] = parts[4]
            if len(parts) >= 6 and parts[5]:
                tracking_data['utm_content'] = parts[5]
            
            logger.info(f"‚úÖ Xtracky processado: {tracking_data}")
            return tracking_data
        
        # Fallback: usar como click_id
        return {'click_id': data_string}
        
    except Exception as e:
        logger.error(f"‚ùå Erro processando Xtracky: {e}")
        return {'click_id': data_string}

# ================================
# FUN√á√ïES DO FUNIL DE VENDAS
# ================================

async def check_user_in_group(context, user_id):
    """Verifica se usu√°rio √© membro do grupo"""
    try:
        if not GROUP_ID or GROUP_ID.startswith('-100234'):  # Placeholder detectado
            logger.info(f"üîß Grupo n√£o configurado - modo h√≠brido ativado")
            return False
            
        member = await context.bot.get_chat_member(GROUP_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"‚ùå Erro verificando membro: {e}")
        return False

async def send_group_invite(update, user_name):
    """Envia convite para o grupo"""
    try:
        if not GROUP_INVITE_LINK or 'exemplo' in GROUP_INVITE_LINK:
            # Modo h√≠brido: sem grupo configurado
            message = f"üëã Ol√° {user_name}!\n\n"
            message += "‚úÖ Sistema de tracking ativo e funcionando!\n\n"
            message += "Use /pix para gerar PIX com tracking completo!"
            
            await update.message.reply_text(message)
            return
            
        # Convite para grupo configurado
        keyboard = [
            [InlineKeyboardButton(f"üöÄ ENTRAR NO {GROUP_NAME}", url=GROUP_INVITE_LINK)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = f"üëã Ol√° {user_name}!\n\n"
        message += f"Para acessar todo o conte√∫do VIP, voc√™ precisa entrar no nosso grupo exclusivo!\n\n"
        message += f"üéØ Clique no bot√£o abaixo para entrar:"
        
        await update.message.reply_text(message, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"‚ùå Erro enviando convite: {e}")

async def send_preview_gallery(context, user_id):
    """Envia galeria de pr√©vias com delays estrat√©gicos"""
    try:
        # Mensagem de boas-vindas
        await context.bot.send_message(user_id, WELCOME_GROUP_MESSAGE)
        
        # Aguarda antes de come√ßar as pr√©vias
        await asyncio.sleep(DELAY_BETWEEN_PREVIEWS)
        
        # Envia primeira pr√©via (v√≠deo)
        try:
            await context.bot.send_video(
                user_id, 
                PREVIEW_MEDIA['video1'],
                caption="üî• Primeira pr√©via exclusiva!"
            )
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro enviando v√≠deo 1: {e}")
            await context.bot.send_message(user_id, "üî• Primeira pr√©via (v√≠deo n√£o dispon√≠vel)")
        
        await asyncio.sleep(DELAY_BETWEEN_PREVIEWS)
        
        # Envia fotos em grupo
        media_group = []
        try:
            media_group.append(InputMediaPhoto(PREVIEW_MEDIA['photo1'], caption="üì∏ Pr√©vias exclusivas!"))
            media_group.append(InputMediaPhoto(PREVIEW_MEDIA['photo2']))
            
            await context.bot.send_media_group(user_id, media_group)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro enviando fotos: {e}")
            await context.bot.send_message(user_id, "üì∏ Galeria de fotos (n√£o dispon√≠vel)")
        
        await asyncio.sleep(DELAY_BETWEEN_PREVIEWS)
        
        # Segunda pr√©via (v√≠deo)
        try:
            await context.bot.send_video(
                user_id, 
                PREVIEW_MEDIA['video2'],
                caption="üé¨ Mais conte√∫do incr√≠vel!"
            )
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro enviando v√≠deo 2: {e}")
            await context.bot.send_message(user_id, "üé¨ Segunda pr√©via (v√≠deo n√£o dispon√≠vel)")
        
        await asyncio.sleep(DELAY_BETWEEN_PREVIEWS)
        
        # Convite para VIP
        keyboard = [
            [InlineKeyboardButton("üíé QUERO ACESSO VIP - R$ 10", callback_data="buy_vip")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            user_id,
            VIP_INVITATION_MESSAGE,
            reply_markup=reply_markup
        )
        
        logger.info(f"‚úÖ Galeria de pr√©vias enviada para usu√°rio {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Erro enviando galeria: {e}")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /start do bot - Etapa 1 do funil"""
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name or "Usu√°rio"
    
    logger.info(f"üë§ Usu√°rio {user_name} ({user_id}) iniciou conversa")
    
    # Processa par√¢metro de tracking (mant√©m funcionalidade existente)
    tracking_data = {}
    if context.args:
        encoded_param = ' '.join(context.args)
        logger.info(f"üîç Par√¢metro recebido: {encoded_param}")
        tracking_data = decode_tracking_data(encoded_param)
    else:
        # Busca √∫ltimo tracking dispon√≠vel
        try:
            response = requests.get(f"{API_GATEWAY_URL}/api/tracking/latest", timeout=5)
            if response.status_code == 200:
                api_data = response.json()
                if api_data.get('success') and api_data.get('original'):
                    tracking_data = json.loads(api_data['original'])
                    logger.info(f"üìã Tracking recente aplicado: {tracking_data}")
        except Exception as e:
            logger.error(f"‚ùå Erro buscando tracking: {e}")
    
    # Salva dados do usu√°rio via API (mant√©m funcionalidade existente)
    try:
        user_data = {
            'telegram_id': user_id,
            'username': user_name,
            'first_name': update.effective_user.first_name or user_name,
            'last_name': update.effective_user.last_name or '',
            'tracking_data': tracking_data
        }
        
        logger.info(f"üì§ Enviando dados do usu√°rio para API: {user_data}")
        response = requests.post(f"{API_GATEWAY_URL}/api/users", json=user_data, timeout=5)
        if response.status_code == 200:
            logger.info(f"‚úÖ Usu√°rio salvo no banco via API")
        else:
            logger.warning(f"‚ö†Ô∏è Erro salvando usu√°rio: {response.status_code}")
    except Exception as e:
        logger.error(f"‚ùå Erro comunica√ß√£o API: {e}")
    
    # NOVA FUNCIONALIDADE: Verifica√ß√£o de membro do grupo
    is_member = await check_user_in_group(context, user_id)
    
    if is_member:
        # Usu√°rio j√° √© membro - envia galeria imediatamente
        logger.info(f"‚úÖ Usu√°rio {user_id} j√° √© membro do grupo")
        
        # Resposta com tracking preservado
        if tracking_data:
            message = f"üëã Bem-vinda de volta, {user_name}!\n\n"
            message += "‚úÖ Tracking preservado:\n"
            if tracking_data.get('click_id'):
                message += f"üéØ Click ID: {tracking_data.get('click_id')}\n"
            if tracking_data.get('utm_source'):
                message += f"üì° UTM Source: {tracking_data.get('utm_source')}\n"
            message += "\nüéØ Enviando conte√∫do exclusivo..."
            await update.message.reply_text(message)
        
        # Envia galeria de pr√©vias
        await send_preview_gallery(context, user_id)
    else:
        # Usu√°rio n√£o √© membro - convida para grupo ou modo h√≠brido
        logger.info(f"üîç Usu√°rio {user_id} n√£o √© membro - enviando convite")
        
        # Mostra tracking se dispon√≠vel
        if tracking_data:
            tracking_msg = f"‚úÖ Tracking capturado:\n"
            if tracking_data.get('click_id'):
                tracking_msg += f"üéØ Click ID: {tracking_data.get('click_id')}\n"
            if tracking_data.get('utm_source'):
                tracking_msg += f"üì° UTM Source: {tracking_data.get('utm_source')}\n"
            tracking_msg += "\n"
            await update.message.reply_text(tracking_msg)
        
        # Envia convite para grupo ou continua em modo h√≠brido
        await send_group_invite(update, user_name)

async def pix_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /pix - gera PIX via API Gateway"""
    user_id = update.effective_user.id
    
    try:
        # Solicita PIX via API Gateway
        pix_data = {
            'user_id': user_id,
            'valor': 10.0,
            'plano': 'VIP'
        }
        
        response = requests.post(f"{API_GATEWAY_URL}/api/pix/gerar", json=pix_data, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                message = f"üí∞ PIX de R$ {result['valor']} gerado!\n\n"
                message += f"üìã PIX Copia e Cola:\n`{result['pix_copia_cola']}`\n\n"
                message += "‚úÖ Todos os dados de tracking foram preservados!"
                await update.message.reply_text(message)
            else:
                await update.message.reply_text(f"‚ùå Erro: {result.get('error')}")
        else:
            await update.message.reply_text("‚ùå Erro na comunica√ß√£o com gateway de pagamento")
            
    except Exception as e:
        logger.error(f"‚ùå Erro comando PIX: {e}")
        await update.message.reply_text("‚ùå Erro interno do sistema")

# ================================
# HANDLERS DO FUNIL DE VENDAS
# ================================

async def handle_join_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para aprova√ß√£o de entrada no grupo - Etapa 2 do funil"""
    try:
        chat_join_request = update.chat_join_request
        user_id = chat_join_request.from_user.id
        user_name = chat_join_request.from_user.first_name or "Usu√°rio"
        
        logger.info(f"üì• Solicita√ß√£o de entrada: {user_name} ({user_id})")
        
        # Delay estrat√©gico antes de aprovar
        logger.info(f"‚è≥ Aguardando {DELAY_BEFORE_APPROVAL}s antes de aprovar...")
        await asyncio.sleep(DELAY_BEFORE_APPROVAL)
        
        # Aprova entrada no grupo
        await chat_join_request.approve()
        logger.info(f"‚úÖ Usu√°rio {user_id} aprovado no grupo")
        
        # Envia mensagem de boas-vindas imediata no privado
        try:
            await context.bot.send_message(
                user_id,
                f"üéâ Parab√©ns {user_name}!\n\nVoc√™ foi aprovada no grupo!\n\n‚è≥ Em instantes vou te enviar conte√∫dos exclusivos..."
            )
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel enviar mensagem privada: {e}")
        
        # Aguarda um pouco e envia galeria de pr√©vias
        await asyncio.sleep(3)
        await send_preview_gallery(context, user_id)
        
    except Exception as e:
        logger.error(f"‚ùå Erro processando entrada no grupo: {e}")

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para callbacks dos bot√µes - Sistema VIP"""
    try:
        query = update.callback_query
        user_id = query.from_user.id
        user_name = query.from_user.first_name or "Usu√°rio"
        
        await query.answer()
        
        if query.data == "buy_vip":
            logger.info(f"üíé Usu√°rio {user_id} clicou em comprar VIP")
            
            # Integra com sistema PIX existente
            try:
                # Solicita PIX via API Gateway (mant√©m funcionalidade existente)
                pix_data = {
                    'user_id': user_id,
                    'valor': 10.0,
                    'plano': 'VIP'
                }
                
                response = requests.post(f"{API_GATEWAY_URL}/api/pix/gerar", json=pix_data, timeout=10)
                
                if response.status_code == 200:
                    result = response.json()
                    if result.get('success'):
                        message = f"üí∞ PIX VIP de R$ {result['valor']} gerado!\n\n"
                        message += f"üìã PIX Copia e Cola:\n`{result['pix_copia_cola']}`\n\n"
                        message += "üî• Ap√≥s o pagamento voc√™ ter√° acesso TOTAL ao conte√∫do VIP!\n\n"
                        message += "‚úÖ Tracking preservado - sua convers√£o ser√° computada!"
                        
                        await query.edit_message_text(message)
                        logger.info(f"‚úÖ PIX VIP gerado para usu√°rio {user_id}")
                    else:
                        await query.edit_message_text(f"‚ùå Erro: {result.get('error')}")
                else:
                    await query.edit_message_text("‚ùå Erro na comunica√ß√£o com gateway de pagamento")
                    
            except Exception as e:
                logger.error(f"‚ùå Erro gerando PIX VIP: {e}")
                await query.edit_message_text("‚ùå Erro interno do sistema")
        
    except Exception as e:
        logger.error(f"‚ùå Erro processando callback: {e}")

def main():
    """Fun√ß√£o principal do bot"""
    logger.info("ü§ñ === BOT TELEGRAM - FUNIL DE VENDAS INICIANDO ===")
    logger.info(f"üîó API Gateway: {API_GATEWAY_URL}")
    logger.info(f"üóÑÔ∏è Database: {'PostgreSQL' if DATABASE_URL else 'API Gateway'}")
    logger.info(f"üë• Grupo ID: {GROUP_ID}")
    logger.info(f"‚è∞ Delay aprova√ß√£o: {DELAY_BEFORE_APPROVAL}s")
    logger.info(f"üì∏ Delay pr√©vias: {DELAY_BETWEEN_PREVIEWS}s")
    
    # Cria aplica√ß√£o
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Adiciona handlers existentes (mant√©m funcionalidade)
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("pix", pix_command))
    
    # Adiciona novos handlers do funil
    application.add_handler(ChatJoinRequestHandler(handle_join_request))
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # Executa bot
    logger.info("üöÄ Bot do funil iniciado com sucesso!")
    logger.info("üì± Funcionalidades ativas:")
    logger.info("   ‚úÖ Tracking UTM preservado")
    logger.info("   ‚úÖ Sistema PIX TriboPay")
    logger.info("   ‚úÖ PostgreSQL integrado")
    logger.info("   ‚úÖ Verifica√ß√£o de grupo")
    logger.info("   ‚úÖ Aprova√ß√£o autom√°tica")
    logger.info("   ‚úÖ Galeria de pr√©vias")
    logger.info("   ‚úÖ Bot√µes VIP")
    logger.info("   ‚úÖ Modo h√≠brido (com/sem grupo)")
    
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()